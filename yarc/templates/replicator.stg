group replicator;

scenario(name, before_snippets, settings, stage, writers, after_snippets) ::=
<<
""" <name> scenario """
from math import ceil

import omni.usd
import omni.replicator.core as rep

from pxr import Gf
from omni.demo.data_generator import get_files, save_meshes, get_prims

class Vector(Gf.Vec3d, list):
  def __init__(self, *args, **kwargs):
    Gf.Vec3d.__init__(self, *args, **kwargs)

<before_snippets>

<settings>

rps = {}
with rep.new_layer():
  <stage>
  
  <writers>

<after_snippets>  
>>

snippet(code) ::= 
<<
<code>
>>

settings(settings, stmts) ::= 
<<
# settings
settings = <settings>
<stmts; separator="\n">
>>

setting(setting, value) ::=
<<
rep.settings.carb_settings(setting="<setting>", value=<value>)
>>

writers(stmts) ::=
<<
# writers
<stmts; separator="\n">
>>

writer(writer_id, params) ::=
<<
writer = rep.WriterRegistry.get("<writer_id>")
writer.initialize(
  <params:{ p | <p.name>=<p.value>}; separator=",\n">
)
writer.attach(list(rps.values()))

>>


stage(stmts) ::=
<<
<stmts; separator="\n">
>>

open_stmt(path) ::=
<<
omni.usd.get_context().open_stage(<path>)

>>

edit_timeline(params, values) ::=
<<
<params,values: { p,v | rep.modify.<p>(value=<v>)}; separator="\n">

>>

edit_stmt(id, stmts, behaviors) ::=
<<
with <id>:
  <stmts; separator="\n">
<behaviors; separator="\n">

>>

param_list(params) ::=
<<
<params:{ p | <p.name>=<p.value>}; separator=", ">
>>

create_prim(id, prim, params, stmts, behaviors) ::=
<<
<id> = rep.create.<prim>(<param_list(params)>)
<edit_stmt(id=id, stmts=stmts, behaviors=behaviors)>
>>

create_camera(id, prim, params, stmts, behaviors) ::=
<<
<id> = rep.create.<prim>(<param_list(params)>)
rps["<id>"] = rep.create.render_product(camera=<id>, resolution=(settings["resolution")), 
<edit_stmt(id=id, stmts=stmts, behaviors=behaviors)>
>>

create_from(id, file, params, stmts, behaviors) ::=
<<
<id> = rep.create.from_usd(usd=<file>, <param_list(params)>)
<edit_stmt(id=id, stmts=stmts, behaviors=behaviors)>

>>

create_material(id, params) ::=
<<
<id> = rep.create.material_omnipbr(<param_list(params)>)
>>

instantiate_expr(id, file, params, stmts, behaviors) ::=
<<
<id> = rep.randomizer.instantiate(paths=<file>, <param_list(params)>)
<edit_stmt(id=id, stmts=stmts, behaviors=behaviors)>
>>

group_expr(id, names, params, stmts, behaviors) ::=
<<
<id> = rep.create.group([<names: { n | <n> }; separator="\n">], <param_list(params)>)
<edit_stmt(id=id, stmts=stmts, behaviors=behaviors)>
>>

get_expr(id, filter, path, params) ::=
<<
<id> = rep.get.<if(filter)><filter><else>prims<endif>(path_pattern=<path>, <param_list(params)>)
>>

simple_attr(name, type, value) ::=
<<
rep.modify.attribute(name="<name>", value=<value><if(type)>, attribute_type="<type>"<endif>)
>>

scatter_expr(scatter_type, surface, params) ::=
<<
rep.randomizer.<scatter_type>(<surface>, <param_list(params)>)
>>

rot_around_expr(center, params) ::=
<<
rep.modify.rotate_around(center_prim=<center>, <param_list(params)>)
>>

physics_expr(physics_attr, params) ::=
<<
rep.physics.<physics_attr>(<param_list(params=params)>)
>>

move_to_camera_expr(camera, params) ::=
<<
rep.modify.pose_camera_relative(camera=<camera>, render_product=rps["<id>"], <param_list(params)>)
>>

modify_pose(type, value) ::=
<<
rep.modify.pose(<type>=<value>)
>>

translate_expr(type, value) ::=
<<
<modify_pose(type=type, value=value)>
>>

rotate_expr(type, value) ::=
<<
<modify_pose(type=type, value=value)>
>>

scale_expr(value) ::=
<<
<modify_pose(type="scale", value=value)>
>>

look_at_expr(value) ::=
<<
<modify_pose(type="look_at", value=value)>
>>

look_at_up_axis_expr(value) ::=
<<
<modify_pose(type="look_at_up_axis", value=value)>
>>

size_expr(value) ::=
<<
<modify_pose(type="size", value=value)>
>>

pivot_expr(value) ::=
<<
<modify_pose(type="pivot", value=value)>
>>

semantics_expr(value) ::=
<<
rep.modify.semantics(<value>)
>>

visible_expr(value) ::=
<<
rep.modify.visibility(<value>)
>>

material_expr(value) ::=
<<
rep.randomizer.materials([<value>])
>>
inner_behavior_stmt(behavior, id, block) ::=
<<
with <behavior>:
  with <id>:
    <block>
>>

behavior_stmt(behavior, block) ::=
<<
with <behavior>:
  <block>
>>

behavior_expr(interval, is_frame) ::=
<<
rep.trigger.<if(is_frame)>on_frame(num_frames<else>on_time(num<endif>=ceil(settings["num_scenes"]<if(interval)>/<interval><endif>)<if(interval)>, interval=<interval><endif>)
>>

behavior_block(stmts) ::=
<<
<stmts; separator="\n">
>>

fetch_expr(ext, path, filter, limit, recursive) ::=
<<
get_files(
  path=<path>, 
  exts=<ext><if(recursive)>, 
  recursive=True<endif><if(filter)>, 
  path_filter=<filter><endif><if(limit)>, 
  max_files=<limit><endif>
)
>>

expr_stmt(assignable, op, value) ::=
<<
<assignable> <op> <value>
>>

test(expr, cond, else_expr) ::=
<<
<expr><if(cond)> if <cond> else <else_expr><endif>
>>

or_test(exprs) ::=
<<
<exprs; separator=" or ">
>>

and_test(exprs) ::=
<<
<exprs; separator=" and ">
>>

not_test(expr) ::=
<<
not <expr>
>>

comparison(exprs, ops) ::= 
<<
<first(exprs)><if(ops)><rest(exprs),ops:{e,o | <\ ><o> <e>}><endif>
>>

expr(exprs) ::=
<<
<exprs; separator=" | ">
>>

xor_expr(exprs) ::=
<<
<exprs; separator=" ^ ">
>>

and_expr(exprs) ::=
<<
<exprs; separator=" & ">
>>

shift_expr(exprs, ops) ::=
<<
<first(exprs)><if(ops)><rest(exprs),ops:{e,o | <\ ><o.text> <e>}><endif>
>>

arith_expr(terms, ops) ::=
<<
<first(terms)><if(ops)><rest(terms),ops:{t,o | <\ ><o.text> <t>}><endif>
>>

term(factors, ops) ::=
<<
<first(factors)><if(ops)><rest(factors),ops:{f,o | <\ ><o.text> <f>}><endif>
>>

prefix_factor(factor, prefix) ::=
<<
<if(prefix)><prefix.text><endif><factor>
>>

power(atom, factor) ::=
<<
<atom><if(factor)> ** <factor><endif>
>>

atom_expr(atom, trailers) ::=
<<
<atom><trailers; separator="">
>>

parenthesized_expr(expr) ::= 
<<
(<expr>)
>>

list(list_comp) ::=
<<
[<if(list_comp)><list_comp><endif>]
>>

vector(values) ::=
<<
Vector(<values>)
>>

dict(dict_comp) ::=
<<
{<if(dict_comp)><dict_comp><endif>}
>>

len(value) ::=
<<
len(<value>)
>>

setting_id(id) ::=
<<
settings["<id>"]
>>

distribution(name, arglist) ::=
<<
rep.distribution.<name>(<arglist>)
>>

null() ::= "None"
true() ::= "True"
false() ::= "False"

combined_distribution(distrs) ::=
<<
rep.distribution.combine([<distrs; separator=", ">])
>>

list_comp(expr, for) ::=
<<
<expr> <for>
>>

test_list(exprs) ::= 
<<
<exprs; separator=", ">
>>

range(from, to, step) ::=
<<
list(*range(<from>, <to><if(step)>, <step><endif>))
>>

vector_comp(x, y, z) ::=
<<
<x>, <y>, <z>
>>

index(index) ::=
<<
[<index>]
>>

dot_attr(attr) ::=
<<
["<attr>"]
>>

arg_list(args) ::= 
<<
<args; separator=", ">
>>

arg(kw_or_arg, arg) ::=
<<
<kw_or_arg><if(arg)> = <arg><endif>
>>

subscript_list(subs) ::= 
<<
<subs; separator=", ">
>>

subscript(from, colon, to, step) ::=
<<
<if(from)><from><endif><if(colon)>:<endif><if(to)><to><endif><step>
>>

subscript_step(step) ::=
<<
:<if(step)><step><endif>
>>

dict_comp(key, value, for) ::=
<<
<key>: <value> <for>
>>

key_value_list(keys, values) ::=
<<
<keys,values:{ k,v | <k>: <v>}; separator=", ">
>>

comp_for(exprs, seq, comp_iter) ::=
<<
for <exprs> in <seq><if(comp_iter)> <comp_iter><endif>
>>

comp_if(cond, comp_iter) ::= 
<<
if <cond><if(comp_iter)> <comp_iter><endif>
>>
